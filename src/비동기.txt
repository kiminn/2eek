
비동기
: 코드는 위에서 아래부터 읽히기 때문에 순서대로, 그래서 오래 걸리는 코드는 따로 빼서
얘랑 얘랑 동시가 아니지 이렇게 뭐라고 해야하지 말이 안나오네, 아니 그렇게까지 적지 마세요
암튼 오래 걸리는 코드는 따로 뺴서 얘는 이렇게 해서 나중에 처리할 수 있도록 하는 것이라 
생각해요

: 동시에 일어나지 않고, 순서대로 일어나는 것 (동기적이다)


 코드는 위에서 아래부터 읽히기 때문에 순서대로(동기적으로 실행된다)

 a -> b -> c(0.00001s) -> d(10s) -> e(3s) -> 13.000001s


d는 시간이 너무 오래걸리기 때문에 자바스크립트에서는 얘를 비동기 함수다라고 해서 미리
정해놓은 함수들이 있음 -> 비동기 함수

a - b - c(3.00001s)
d------------------------------------(10s) -> 10s

* 비동기함수

setTimeOut
setInterval
Promise

------------------------------------------------------------------------

* Promise
for 1초
비동기 아닌 함수를 비동기화 시키는 것을 

for
----
Promise((resolve, reject) => {
    for()
    if(!user) reject() // 비동기 함수가 실패했다
    resolve() // 비동기 함수가 성공했다
})

------------------------------------------------------------------------

우선순위
* 동기가 우선순위

동기함수 (10초) ------------------------------- (실행)
비동기함수 (8초) --- 외주업체(이벤트루프) -- 저장소

------------------------------------------------------------------------

자바스크립트에서는 비동기 함수를 정해놨대
그럼 만약에 해당 비동기가 끝나야만 실행해야하는 동기 함수

동기함수 -------(user)---- (10초) --- 비동기 (user)
비동기 ---------(8초)

에러가 발생
동기함수가 모두 끝나고 비동기가 실행되기 떄문에
비동기가 끝난 결과 값을 참조하는 값이 있다면 에러가 날 수 밖에 없어요

성공하고 나서 실행해야하는 함수를 따로 뺼 수 있고
실패하고 나서 실행해야하는 함수를 따로 뺄 수 있습니다.

then catch

Promise().then((result(user)=> user를 사용하는 동기 함수))

동기함수 ------ (8초)
비동기 -------- (8초) --- (user...) 2초 --- (10초)

------------------------------------------------------------------------
async, await

---- promoise
const a = async() => {
    비동기로직
}

a.then().catch()


async는 특정 함수를 Promise화 시키는 것을 이야기함
await은 promise 함수 내에서 비동기 함수가 있다면 특정함수를 기다리게 할 수 있는 역할


------------------------------------------------------------------------
axios, fetch

http requset
(http 프로토콜을 사용한 다른 서버에의 요청)

axios에는 get, post등과 같은 method형태를 정의할 수 있음
method는 backend에서 정해준 이 통신의 종류

get 요청은 data를 보낼 수 없다
post는 data를 보낼 수 있다

axios.get("https://topdragon.co.kr/product", {
    params: {
        ...
    }
})




------------------------------------------------------------------------